demo()
install.packages("swirl")
demo
?
asd
demo()
swirl()
swirl
library("swirl")
swirl()
5+12
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
swirl()
1
swirl()
getwd()
ls()
x <- 9
ls
ls()
dir()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("documents")
setwd("C:\Users\Lukas\Documents")
setwd("C:\\Users\\Lukas\\Documents")
play
play()
setwd("C:\\Users\\Lukas\\Documents")
dir.create("testdir")
nxt()
setwd("testdir")
file.create("mytest.R")
lst
lst()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
file.path("mytest3.R")$folder1
?file.path()
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2", "mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2\\testdir33")
dir.create("testdir2\\testdir33", recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
?unlink
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
play()
setwd("C:\\Users\\Lukas\\Documents")
nxt()
unlink('testdir')
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
? `:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10,30)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Lukas")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("x", "y", "z", sep="")
)
paste(1:3, c("x", "y", "z", sep=""))
paste(1:3, c("x", "y", "z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
swirl
import("swirl")
demo(package = "swirl")
library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rnorm(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_name <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x{x>0}
x[x>]
x[x>0]
x[!is.na(x) & x > 0]
x[c(1,3,4)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <= c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo", "bar", "norf")
identical(vect1, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,
| 5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(4,5)
my_matrix2 <- matrix(nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all (ints > 0)
library("swirl")
swirl*()
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
quit
stop
quit()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
setwd("C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2")
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
install.package("vecsets")
install.packages("vecsets'")
install.packages("vecsets'")
install.packages("vecsets")
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
descriptions
head(descriptions)
read.csv(file="product_descriptions.csv", stringsAsFactors = FALSE)
?dimensions
dim(read.csv(file="product_descriptions.csv", stringsAsFactors = FALSE))
dim(descriptions)
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
ReadInfunc(
)
dim(descriptions)
length(descriptions)
descriptions[1]
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Descriptions.R')
View(checkFunc)
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Descriptions.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Descriptions.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Descriptions.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Descriptions.R')
BinarySearch(1, descriptions, 1, length(descriptions))
BinarySearch(100001, descriptions, 1, length(descriptions))
sapply(descriptions, function(x) is.na(x))
descriptions[sapply(descriptions, function(x) is.na(x))]
list.condition <- sapply(descriptions, function(x) is.na(x))
output.list <- descriptions[list.condition]
output.list
descriptions
descriptions[rowSums(is.NA(descriptions)) > 0,]
descriptions[rowSums(is.na(descriptions)) > 0,]
descriptions[is.na(descriptions)]
names(descriptions[is.na(descriptions)])
descriptions[2]
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
ReadInfunc()
descriptions[1]
descriptions["100001"]
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
print("a")
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
ReadInfunc()
Main()
ReadInfunc()
delete(queries)
remove(queries)
ReadInfunc()
?read
?read.csv
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
ReadInfunc()
length(queries)
Main()
length(queries)
length(queries$product_uid)
queries$id
remove(queries)
ReadInfunc()
length(queries)
length(queries$id)
length(queries$product_uid)
length(queries$product_title)
queries$relevance
length(read.csv(file="query_product_short.csv", stringsAsFactors = FALSE))
length(read.csv(file="query_product_short.csv", stringsAsFactors = FALSE)$id)
tmpQueries<-read.csv(file="query_product_short.csv", stringsAsFactors = FALSE)
length(tmpQueries)
length(tmpQueries$id)
queries<<-tmpQueries[(tmpQueries$relevance)%%1==0,]
length(queries)
length(queries$id)
ReadInFunc()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
ReadInfunc()
length(queries$id)
Main()
Main()
a<-sort(unique(queries$product_uid, FALSE))
tmpdescriptions<-read.csv(file="product_descriptions.csv", stringsAsFactors = FALSE)
descriptions<<-Selectdescriptions(a,tmpdescriptions)
Main()
descriptions
descriptions["100028"]
descriptions["100028"][1]
descriptions["100028"]$`100028`
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
Main()
getProductDescFromQuery(100028)
descriptions["100028"]$100028
descriptions["100028"]$'100028'
descriptions["100028"]$"100028"
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
descriptions["100028"]$"100028"
toString(100028)
stringId <- toString(100028)
descriptions[stringId]$stringId
descriptions[stringId]$"100028"
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
read.table("DataSci.txt", sep = "\t")
read.table("DataSci.txt", sep = "\t")$Salaris
dim(read.table("DataSci.txt", sep = "\t"))
dim(read.table("DataSci.txt", sep = "\t", header = "TRUE"))
dim(read.table("DataSci.txt", sep = "\t", header = TRUE))
read.table("DataSci.txt", sep = "\t")[1]
read.table("DataSci.txt", sep = "\t")[1,]
read.table("DataSci.txt", sep = "\t")[,1]
read.table("DataSci.txt", sep = "\t")[,1][1]
read.table("DataSci.txt")
read.table("DataSci.txt")$V1
table <- read.table("DataSci.txt", header = TRUE)
table
table$Salaris
fit <- lm(table$Salaris ~ table$GPA + table$DataSci + table$Geslacht, data = table)
fit
coefficients(fit)
fitted(fit)
fit <- lm(Salaris ~ GPA + DataSci + Geslacht, data = table)
fit
summary(fit)
coef(fit)
summary(fit)$r.squared
Main()
descriptions("100028")$"100028"
descriptions["100028"]$"100028"
getProductDescFromQuery(100028)
toString(100028)
descriptions["100028"]
descriptions["100028"]'100028'
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
descriptions["100028"]$'100028'
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
descriptions["100028"]
names(descriptions["100028"])
descriptions["100028"]$names(descriptions["100028"])
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)
getProductDescFromQuery(100028)[1]
getProductDescFromQuery(100028)[[1]
]
getProductDescFromQuery(100028)[[1]]
source('C:/Users/Lukas/Desktop/School/DATA/IRA/Prac 2/Program.R')
getProductDescFromQuery(100028)[[1]]
Main()
